import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery

from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReactionTypeEmoji

from SQL_Queries import *

from check_functions import *

load_dotenv()

TOKEN = getenv("TOKEN")

dp = Dispatcher(storage=MemoryStorage())

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}, —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π "
                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


# –ö–æ–º–∞–Ω–¥–∞ /addReactionEvent - –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command('addReactionEvent'))
async def add_emoji_reaction(message: Message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ /addReactionEvent –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞.")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.strip().split()

    await message.answer(str(len(args)))

    """if len(args) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                            "/addReactionEvent <emoji> <event_duration>")
        return"""

    # –§–∏–∫—Å–∏—Ä—É–µ–º –∞–π–¥–∏ —á–∞—Ç–∞
    chat_id = message.chat.id

    # –§–∏–∫—Å–∏—Ä—É–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    user_id = get_tg_id(message)

    # –§–∏–∫—Å–∏—Ä—É–µ–º —Å–º–∞–π–ª–∏–∫ –¥–ª—è –±—É–ª–ª–∏–Ω–≥–∞
    if is_available_emoji(args[1]):
        emoji  = is_available_emoji(args[1])
    else:
        await message.answer("–°–º–∞–π–ª–∏–∫ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º!")
        return

    # –§–∏–∫—Å–∏—Ä—É–µ–º –¥–ª–∏–Ω—É –∏–≤–µ–Ω—Ç–∞
    await message.answer(args[2])

    if transfer_interval(args[2]):
        event_duration = transfer_interval(args[2])
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≤–µ–Ω—Ç–∞: \n"
                             "- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≤–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ò–ù–£–¢–´:–°–ï–ö–£–ù–î–´; \n"
                             "- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≤–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–∞—Å–∞.")
        return


    # –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–∞ –∏–≤–µ–Ω—Ç–∞
    event_start = message.date

    insert_reaction_event(chat_id, user_id, emoji, event_duration, event_start)

    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ä–µ–∞–∫—Ü–∏–∏:\n"
                        f"Chat ID: {chat_id}\n"
                        f"User ID: {user_id}\n"
                        f"Emoji: {emoji}\n"
                        f"Event Duration: {event_duration}\n"
                        f"Start Event: {event_start}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def update_user_data(message: Message) -> None:
    """ user_id = message.from_user.id  # –ø–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ö–æ—Å—Ç—è - 992948178
    # –Ø - 7044405837
    if user_id == 992948178:
        emoji = ReactionTypeEmoji(emoji='ü§ì')
        try:
            await message.react([emoji])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")"""


async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)

    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped!")
